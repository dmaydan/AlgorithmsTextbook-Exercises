Convert the following values to binary using "divide by 2." Show the stack of remainders.
	1. Decimal: 17
		17/2 = 8 R1
		8/2 = 4 R0
		4/2 = 2 R0
		2/2 = 1 R0
		1/2 = 0 R1
		Stack:
		1
		0
		0
		0
		1
		Binary: 10001
	2. Decimal: 45
		45/2 = 22 R1
		22/2 = 11 R0
		11/2 = 5 R1
		5/2 = 2 R1
		2/2 = 1 R0
		1/2 = 0 R1
		Stack:
		1
		0
		1
		1
		0
		1
		Binary: 101101
	3. Decimal 96
		96/2 = 48 R0
		48/2 = 24 R0
		24/2 = 12 R0
		12/2 = 6 R0
		6/2 = 3 R0
		3/2 = 1 R1
		1/2 = 0 R1
		Stack:
		1
		1
		0
		0
		0
		0
		0
		Binary: 1100000

Convert the following infix expression to prefix/postfix. (full parentheses method)
1. (A+B)*(C+D)*(E+F) --> (((A+B)*(C+D))*(E+F)) 
	Prefix: **+AB+CD+EF
	Postfix: AB+CD+*EF+* 
2. A+((B+C)*(D+E)) --> (A+((B+C)*(D+E)))
	Prefix: +A*+BC+DE
	Postfix: ABC+DE+*+
3. A*B*C*D+E+F --> (((((A*B)*C)*D)+E)+F)
	Prefix: ++***ABCDEF
	Postfix: AB*C*D*E+F+

Convert the above infix expressions to postfix using the direct conversion algorithm. Show the stack as the conversion takes place. 
	1. (A+B)*(C+D)*(E+F)
		Step 1:
		Stack: 
		(
		Output:
		Step 2:
		Stack: 
		(
		Output: A
		Step 3:
		Stack:
		+
		(
		Output: A
		Step 4:
		Stack:
		+
		(
		Output: AB
		Step 5:
		Stack:
		Output: AB+
		Step 6:
		Stack:
		*
		Output: AB+
		Step 7:
		Stack:
		(
		*
		Output: AB+
		Step 8:
		Stack:
		(
		*
		Output: AB+C
		Step 9:
		Stack:
		+
		(
		*
		Output: AB+C
		Step 10:
		Stack:
		+
		(
		*
		Output: AB+CD
		Step 11:
		Stack:
		*
		Output: AB+CD+
		Step 12:
		Stack:
		*
		Output: AB+CD+*
		Step 12:
		Stack:
		(
		*
		Output: AB+CD+*
		Step 12:
		Stack:
		(
		*
		Output: AB+CD+*E
		Step 12:
		Stack:
		+
		(
		*
		Output: AB+CD+*E
		Step 13:
		Stack:
		+
		(
		*
		Output: AB+CD+*EF
		Step 13:
		Stack:
		*
		Output: AB+CD+*EF+
		Step 14:
		Stack:
		Output: AB+CD+*EF+*
	Note: I will not perform the algorithm on the other 2 infix expressions because that is just tedious, and I already understand it.

Evaluate the following postfix expressions. Show the stack as each operand and operator is processed.
	1. 2 3 * 4 +
		Step 1:
		Stack:
		2
		Step 2:
		Stack:
		3
		2
		Step 3:
		Stack:
		6
		Step 4:
		Stack:
		4
		6
		Step 5:
		Stack: 
		10
	Note: I will not perform the algorithm on the other 2 postfix expressions because that is just tedious, and I already understand it.

The alternative implementation of the Queue ADT is to use a list such that the rear of the queue is at the end of the list. What would this mean for Big-O performance?
In the other implementation of the queue, enqueue was O(n) and dequeue was O(1). In this implementation, enqueue is O(1) and dequeue is O(n).

What is the result of carrying out both steps of the linked list add method in reverse order? What kind of reference results? What types of problems may result?

The two steps of the linked list add method are setting the next reference of the new node to the current head node and then reassigning the head reference to the new node. If we were to reverse these two steps, we would would first reassign the self.head reference to the node. However, once we do that, we no longer have a reference to the old head of the list so there is no way for us to set the next node reference of our head to the old front node. When we run temp.setNext(self.head) after already setting self.head = temp, we are assigning the next reference of the temp node to self.head. However, since self.head is pointing at the same object as temp, what you are really doing is giving the head node a reference to itself within the next attribute. 

Explain how the linked list remove method works when the item to be removed is in the last node.

When the item to be removed is in the last node, the previous node's (2nd to last node) next reference is set to the last node's next reference which is None. Thereby, the previous node becomes the last node.

Explain how the remove method works when the item is on the only node in the linked list.

Since there is no previous node when the item we are looking for is the only node in the list, we set the self.head reference to the node's next reference. Since the node's next reference is None (it is the only node in the list), the head refers to None.


